
// Generated by Akka gRPC. DO NOT EDIT.
package io.kx.loanapp.view;

import akka.actor.ClassicActorSystemProvider;
import akka.stream.Materializer;
import akka.stream.SystemMaterializer;

import akka.grpc.internal.*;
import akka.grpc.GrpcChannel;
import akka.grpc.GrpcClientCloseException;
import akka.grpc.GrpcClientSettings;
import akka.grpc.javadsl.AkkaGrpcClient;

import io.grpc.MethodDescriptor;

import static io.kx.loanapp.view.LoanAppByStatus.Serializers.*;

import scala.concurrent.ExecutionContext;

import akka.grpc.AkkaGrpcGenerated;


import akka.grpc.javadsl.SingleResponseRequestBuilder;


@AkkaGrpcGenerated
public abstract class LoanAppByStatusClient extends LoanAppByStatusClientPowerApi implements LoanAppByStatus, AkkaGrpcClient {
  public static final LoanAppByStatusClient create(GrpcClientSettings settings, ClassicActorSystemProvider sys) {
    return new DefaultLoanAppByStatusClient(akka.grpc.GrpcChannel$.MODULE$.apply(settings, sys), true, sys);
  }

  public static final LoanAppByStatusClient create(GrpcChannel channel, ClassicActorSystemProvider sys) {
    return new DefaultLoanAppByStatusClient(channel, false, sys);
  }

  @AkkaGrpcGenerated
  protected final static class DefaultLoanAppByStatusClient extends LoanAppByStatusClient {

      private final GrpcChannel channel;
      private final boolean isChannelOwned;
      private final GrpcClientSettings settings;
      private final io.grpc.CallOptions options;
      private final Materializer mat;
      private final ExecutionContext ec;

      private DefaultLoanAppByStatusClient(GrpcChannel channel, boolean isChannelOwned, ClassicActorSystemProvider sys) {
        this.channel = channel;
        this.isChannelOwned = isChannelOwned;
        this.settings = channel.settings();
        this.mat = SystemMaterializer.get(sys).materializer();
        this.ec = sys.classicSystem().dispatcher();
        this.options = NettyClientUtils.callOptions(settings);

        sys.classicSystem().getWhenTerminated().whenComplete((v, e) -> close());
      }

  
    
      private final SingleResponseRequestBuilder<io.kx.loanapp.view.LoanAppViewByStatusModel.GetLoanAppStatusRequest, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewResponse> getLoanAppByStatusRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(getLoanAppByStatusDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<io.kx.loanapp.domain.LoanAppDomain.Submitted, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> onSubmittedRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(onSubmittedDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<io.kx.loanapp.domain.LoanAppDomain.Approved, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> onApprovedRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(onApprovedDescriptor, channel, options, settings, ec);
      }
    
  
    
      private final SingleResponseRequestBuilder<com.google.protobuf.Any, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> ignoreOtherEventsRequestBuilder(akka.grpc.internal.InternalChannel channel){
        return new JavaUnaryRequestBuilder<>(ignoreOtherEventsDescriptor, channel, options, settings, ec);
      }
    
  

      

        /**
         * For access to method metadata use the parameterless version of getLoanAppByStatus
         */
        public java.util.concurrent.CompletionStage<io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewResponse> getLoanAppByStatus(io.kx.loanapp.view.LoanAppViewByStatusModel.GetLoanAppStatusRequest request) {
          return getLoanAppByStatus().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer getLoanAppByStatus(io.kx.loanapp.view.LoanAppViewByStatusModel.GetLoanAppStatusRequest) if possible.
         */
        
          public SingleResponseRequestBuilder<io.kx.loanapp.view.LoanAppViewByStatusModel.GetLoanAppStatusRequest, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewResponse> getLoanAppByStatus()
        
        {
          return getLoanAppByStatusRequestBuilder(channel.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of onSubmitted
         */
        public java.util.concurrent.CompletionStage<io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> onSubmitted(io.kx.loanapp.domain.LoanAppDomain.Submitted request) {
          return onSubmitted().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer onSubmitted(io.kx.loanapp.domain.LoanAppDomain.Submitted) if possible.
         */
        
          public SingleResponseRequestBuilder<io.kx.loanapp.domain.LoanAppDomain.Submitted, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> onSubmitted()
        
        {
          return onSubmittedRequestBuilder(channel.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of onApproved
         */
        public java.util.concurrent.CompletionStage<io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> onApproved(io.kx.loanapp.domain.LoanAppDomain.Approved request) {
          return onApproved().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer onApproved(io.kx.loanapp.domain.LoanAppDomain.Approved) if possible.
         */
        
          public SingleResponseRequestBuilder<io.kx.loanapp.domain.LoanAppDomain.Approved, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> onApproved()
        
        {
          return onApprovedRequestBuilder(channel.internalChannel());
        }
      

        /**
         * For access to method metadata use the parameterless version of ignoreOtherEvents
         */
        public java.util.concurrent.CompletionStage<io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> ignoreOtherEvents(com.google.protobuf.Any request) {
          return ignoreOtherEvents().invoke(request);
        }

        /**
         * Lower level "lifted" version of the method, giving access to request metadata etc.
         * prefer ignoreOtherEvents(com.google.protobuf.Any) if possible.
         */
        
          public SingleResponseRequestBuilder<com.google.protobuf.Any, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> ignoreOtherEvents()
        
        {
          return ignoreOtherEventsRequestBuilder(channel.internalChannel());
        }
      

      
        private static MethodDescriptor<io.kx.loanapp.view.LoanAppViewByStatusModel.GetLoanAppStatusRequest, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewResponse> getLoanAppByStatusDescriptor =
          MethodDescriptor.<io.kx.loanapp.view.LoanAppViewByStatusModel.GetLoanAppStatusRequest, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewResponse>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("io.kx.loanapp.view.LoanAppByStatus", "GetLoanAppByStatus"))
            .setRequestMarshaller(new ProtoMarshaller<io.kx.loanapp.view.LoanAppViewByStatusModel.GetLoanAppStatusRequest>(GetLoanAppStatusRequestSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewResponse>(LoanAppViewResponseSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<io.kx.loanapp.domain.LoanAppDomain.Submitted, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> onSubmittedDescriptor =
          MethodDescriptor.<io.kx.loanapp.domain.LoanAppDomain.Submitted, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("io.kx.loanapp.view.LoanAppByStatus", "OnSubmitted"))
            .setRequestMarshaller(new ProtoMarshaller<io.kx.loanapp.domain.LoanAppDomain.Submitted>(io_kx_loanapp_domain_SubmittedSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState>(LoanAppViewStateSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<io.kx.loanapp.domain.LoanAppDomain.Approved, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> onApprovedDescriptor =
          MethodDescriptor.<io.kx.loanapp.domain.LoanAppDomain.Approved, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("io.kx.loanapp.view.LoanAppByStatus", "OnApproved"))
            .setRequestMarshaller(new ProtoMarshaller<io.kx.loanapp.domain.LoanAppDomain.Approved>(io_kx_loanapp_domain_ApprovedSerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState>(LoanAppViewStateSerializer))
            .setSampledToLocalTracing(true)
            .build();
        
        private static MethodDescriptor<com.google.protobuf.Any, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState> ignoreOtherEventsDescriptor =
          MethodDescriptor.<com.google.protobuf.Any, io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState>newBuilder()
            .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
            .setFullMethodName(MethodDescriptor.generateFullMethodName("io.kx.loanapp.view.LoanAppByStatus", "IgnoreOtherEvents"))
            .setRequestMarshaller(new ProtoMarshaller<com.google.protobuf.Any>(google_protobuf_AnySerializer))
            .setResponseMarshaller(new ProtoMarshaller<io.kx.loanapp.view.LoanAppViewByStatusModel.LoanAppViewState>(LoanAppViewStateSerializer))
            .setSampledToLocalTracing(true)
            .build();
        

      /**
       * Initiates a shutdown in which preexisting and new calls are cancelled.
       */
      public java.util.concurrent.CompletionStage<akka.Done> close() {
        if (isChannelOwned) {
          return channel.closeCS();
        } else {
          throw new GrpcClientCloseException();
        }
      }

     /**
      * Returns a CompletionState that completes successfully when shutdown via close()
      * or exceptionally if a connection can not be established after maxConnectionAttempts.
      */
      public java.util.concurrent.CompletionStage<akka.Done> closed() {
        return channel.closedCS();
      }
  }

}



